// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webApiipAweb.Models;

namespace webApiipAweb.Migrations
{
    [DbContext(typeof(context))]
    partial class contextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SubjectThingPack", b =>
                {
                    b.Property<int>("SubjectsidSubject")
                        .HasColumnType("int");

                    b.Property<int>("ThingPacksidThingPack")
                        .HasColumnType("int");

                    b.HasKey("SubjectsidSubject", "ThingPacksidThingPack");

                    b.HasIndex("ThingPacksidThingPack");

                    b.ToTable("SubjectThingPack");
                });

            modelBuilder.Entity("ThingExecutionThingPackExecution", b =>
                {
                    b.Property<int>("ThingExecutionsidThingExecution")
                        .HasColumnType("int");

                    b.Property<int>("ThingPackExecutionsidThingPackExecution")
                        .HasColumnType("int");

                    b.HasKey("ThingExecutionsidThingExecution", "ThingPackExecutionsidThingPackExecution");

                    b.HasIndex("ThingPackExecutionsidThingPackExecution");

                    b.ToTable("ThingExecutionThingPackExecution");
                });

            modelBuilder.Entity("webApiipAweb.Models.Achivment", b =>
                {
                    b.Property<string>("idAchivment")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idAchivment");

                    b.ToTable("Achivments");
                });

            modelBuilder.Entity("webApiipAweb.Models.AchivmentExecution", b =>
                {
                    b.Property<string>("idAchivmentExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idAchivment")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idAchivmentExecution");

                    b.HasIndex("ChildId");

                    b.HasIndex("idAchivment");

                    b.ToTable("AchivmentExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.AnswearOnTask", b =>
                {
                    b.Property<string>("idAnswearOnTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("accuracy")
                        .HasColumnType("bit");

                    b.Property<string>("idTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("textAnswear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idAnswearOnTask");

                    b.HasIndex("idTask");

                    b.HasIndex("idTestTask");

                    b.ToTable("AnswearOnTasks");
                });

            modelBuilder.Entity("webApiipAweb.Models.AnswearOnTaskOpen", b =>
                {
                    b.Property<string>("idAnswearOnTaskOpen")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("answear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("mark")
                        .HasColumnType("float");

                    b.HasKey("idAnswearOnTaskOpen");

                    b.HasIndex("idTask");

                    b.ToTable("AnswearOnTaskOpen");
                });

            modelBuilder.Entity("webApiipAweb.Models.Appeal", b =>
                {
                    b.Property<string>("idAppeal")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateAppeal")
                        .HasColumnType("datetime2");

                    b.Property<int>("idTypeAppeal")
                        .HasColumnType("int");

                    b.Property<bool>("inArchive")
                        .HasColumnType("bit");

                    b.Property<byte>("status")
                        .HasColumnType("tinyint");

                    b.Property<string>("textAppeal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idAppeal");

                    b.HasIndex("ChildId");

                    b.HasIndex("idTypeAppeal");

                    b.ToTable("Appeals");
                });

            modelBuilder.Entity("webApiipAweb.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("webApiipAweb.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("webApiipAweb.Models.Area", b =>
                {
                    b.Property<string>("idArea")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("areaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idRegion")
                        .HasColumnType("int");

                    b.HasKey("idArea");

                    b.HasIndex("idRegion");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("webApiipAweb.Models.Chapter", b =>
                {
                    b.Property<string>("idChapter")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("access")
                        .HasColumnType("bit");

                    b.Property<int>("idSubject")
                        .HasColumnType("int");

                    b.Property<bool>("isVisible")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numeric")
                        .HasColumnType("int");

                    b.HasKey("idChapter");

                    b.HasIndex("idSubject");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("webApiipAweb.Models.ChapterExecution", b =>
                {
                    b.Property<string>("idChapterExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idChapter")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idSubjectExecution")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idChapterExecution");

                    b.HasIndex("idChapter");

                    b.HasIndex("idSubjectExecution");

                    b.ToTable("ChapterExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.Child", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idMunicipality")
                        .HasColumnType("int");

                    b.Property<string>("idSchool")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("imagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("levelStuding")
                        .HasColumnType("int");

                    b.Property<string>("levelWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passRecoveryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("point")
                        .HasColumnType("float");

                    b.Property<string>("refreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("refreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("spendPoint")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("idMunicipality");

                    b.HasIndex("idSchool");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("webApiipAweb.Models.LevelStuding", b =>
                {
                    b.Property<int>("idLevelStuding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nameLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLevelStuding");

                    b.ToTable("LevelStudings");
                });

            modelBuilder.Entity("webApiipAweb.Models.LevelStudingExecution", b =>
                {
                    b.Property<string>("idLevelStudingExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idLevelStuding")
                        .HasColumnType("int");

                    b.HasKey("idLevelStudingExecution");

                    b.HasIndex("ChildId");

                    b.HasIndex("idLevelStuding");

                    b.ToTable("LevelStudingExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.Municipality", b =>
                {
                    b.Property<int>("idMunicipality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("idArea")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idMunicipality");

                    b.HasIndex("idArea");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("webApiipAweb.Models.Region", b =>
                {
                    b.Property<int>("idRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("regionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idRegion");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("webApiipAweb.Models.School", b =>
                {
                    b.Property<string>("idSchool")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idMunicipality")
                        .HasColumnType("int");

                    b.Property<string>("nameSchool")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idSchool");

                    b.HasIndex("idMunicipality");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("webApiipAweb.Models.SessionChapterExecution", b =>
                {
                    b.Property<string>("idSessionChapterExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("activeSession")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("beginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("endDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("idChapterExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idChild")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idSessionChapterExecution");

                    b.HasIndex("idChapterExecution");

                    b.HasIndex("idChild");

                    b.ToTable("SessionChapterExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.SessionProgress", b =>
                {
                    b.Property<string>("idSessionProgress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusTaskExecution")
                        .HasColumnType("int");

                    b.Property<string>("idSessionChapterExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("taskNumber")
                        .HasColumnType("int");

                    b.HasKey("idSessionProgress");

                    b.HasIndex("idSessionChapterExecution");

                    b.ToTable("SessionProgresses");
                });

            modelBuilder.Entity("webApiipAweb.Models.Solution", b =>
                {
                    b.Property<string>("idSolution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTaskWithClosedAnsw")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTaskWithOpenAnsw")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idSolution");

                    b.HasIndex("idTaskWithClosedAnsw");

                    b.HasIndex("idTaskWithOpenAnsw");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.Subject", b =>
                {
                    b.Property<int>("idSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idLevelStuding")
                        .HasColumnType("int");

                    b.Property<string>("nameSubject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idSubject");

                    b.HasIndex("idLevelStuding");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("webApiipAweb.Models.SubjectExecution", b =>
                {
                    b.Property<string>("idSubjectExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idLevelStudingExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("idSubject")
                        .HasColumnType("int");

                    b.HasKey("idSubjectExecution");

                    b.HasIndex("idLevelStudingExecution");

                    b.HasIndex("idSubject");

                    b.ToTable("SubjectExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithClosedAnsw", b =>
                {
                    b.Property<string>("idTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypesTask")
                        .HasColumnType("int");

                    b.Property<string>("idTestPack")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isIncreasedComplexity")
                        .HasColumnType("bit");

                    b.Property<int>("numericInPack")
                        .HasColumnType("int");

                    b.Property<string>("textQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("theme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTask");

                    b.HasIndex("idTestPack");

                    b.ToTable("TaskWithClosedAnsw");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithClosedAnswsExecution", b =>
                {
                    b.Property<string>("idTaskExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("idAnswearOnTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestPackExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lockedTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("mark")
                        .HasColumnType("float");

                    b.Property<int>("timeExecutionInSecond")
                        .HasColumnType("int");

                    b.HasKey("idTaskExecution");

                    b.HasIndex("idAnswearOnTask");

                    b.HasIndex("idTask");

                    b.HasIndex("idTestPackExecution");

                    b.ToTable("TaskWithClosedAnswsExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithOpenAnsw", b =>
                {
                    b.Property<string>("idTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.Property<int>("TypesTask")
                        .HasColumnType("int");

                    b.Property<double>("fine")
                        .HasColumnType("float");

                    b.Property<string>("htmlModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idTestPack")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isIncreasedComplexity")
                        .HasColumnType("bit");

                    b.Property<int>("numericInPack")
                        .HasColumnType("int");

                    b.Property<bool>("orderImportant")
                        .HasColumnType("bit");

                    b.Property<string>("textQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("theme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTask");

                    b.HasIndex("idTestPack");

                    b.ToTable("TaskWithOpenAnsws");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithOpenAnswsExecution", b =>
                {
                    b.Property<string>("idTaskExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswearResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("idTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestPackExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("lockedTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("mark")
                        .HasColumnType("float");

                    b.Property<int>("timeExecutionInSecond")
                        .HasColumnType("int");

                    b.HasKey("idTaskExecution");

                    b.HasIndex("idTask");

                    b.HasIndex("idTestPackExecution");

                    b.ToTable("TaskWithOpenAnswsExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestPack", b =>
                {
                    b.Property<string>("idTestPack")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idChapter")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idTestPack");

                    b.HasIndex("idChapter");

                    b.ToTable("TestPacks");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestPackExecution", b =>
                {
                    b.Property<string>("idTestPackExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idChapterExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestPack")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idTestPackExecution");

                    b.HasIndex("idChapterExecution");

                    b.HasIndex("idTestPack");

                    b.ToTable("TestPackExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestTask", b =>
                {
                    b.Property<string>("idTestTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestPack")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("textQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTestTask");

                    b.HasIndex("idTestPack");

                    b.ToTable("TestTasks");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestTaskExecution", b =>
                {
                    b.Property<string>("idTestTaskExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusExecution")
                        .HasColumnType("int");

                    b.Property<string>("idAnswearOnTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTryingTestTask")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idTestTaskExecution");

                    b.HasIndex("idAnswearOnTask");

                    b.HasIndex("idTestTask");

                    b.HasIndex("idTryingTestTask");

                    b.ToTable("TestTaskExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheoreticalMaterial", b =>
                {
                    b.Property<string>("idTheoreticalMaterial")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("additionalMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idChapter")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idTheoreticalMaterial");

                    b.HasIndex("idChapter");

                    b.ToTable("TheoreticalMaterial");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheoreticalMaterialResource", b =>
                {
                    b.Property<string>("idTheoreticalMaterialResource")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idTheoreticalMaterial")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTheoreticalMaterialResource");

                    b.HasIndex("idTheoreticalMaterial");

                    b.ToTable("TheoreticalMaterialResource");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheorySession", b =>
                {
                    b.Property<string>("idTheorySession")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("beginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("idChapterExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idChild")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idTheorySession");

                    b.HasIndex("idChapterExecution");

                    b.HasIndex("idChild");

                    b.ToTable("TheorySessions");
                });

            modelBuilder.Entity("webApiipAweb.Models.Thing", b =>
                {
                    b.Property<int>("idThing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idthingPack")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("urlImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("xPosition")
                        .HasColumnType("float");

                    b.Property<double>("yPosition")
                        .HasColumnType("float");

                    b.HasKey("idThing");

                    b.HasIndex("idthingPack");

                    b.ToTable("Things");
                });

            modelBuilder.Entity("webApiipAweb.Models.ThingExecution", b =>
                {
                    b.Property<int>("idThingExecution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idThing")
                        .HasColumnType("int");

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.HasKey("idThingExecution");

                    b.HasIndex("idThing");

                    b.ToTable("ThingExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.ThingPack", b =>
                {
                    b.Property<int>("idThingPack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("imageOfPack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("namePack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idThingPack");

                    b.ToTable("ThingPacks");
                });

            modelBuilder.Entity("webApiipAweb.Models.ThingPackExecution", b =>
                {
                    b.Property<int>("idThingPackExecution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChildId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("idThingPack")
                        .HasColumnType("int");

                    b.Property<bool>("isCompleted")
                        .HasColumnType("bit");

                    b.HasKey("idThingPackExecution");

                    b.HasIndex("ChildId");

                    b.HasIndex("idThingPack");

                    b.ToTable("ThingPackExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TryingTestTask", b =>
                {
                    b.Property<string>("idTryingTestTask")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idTestPackExecution")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("result")
                        .HasColumnType("int");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timeExecutionInSecond")
                        .HasColumnType("int");

                    b.HasKey("idTryingTestTask");

                    b.HasIndex("idTestPackExecution");

                    b.ToTable("TryingTestTasks");
                });

            modelBuilder.Entity("webApiipAweb.Models.TypeAppeal", b =>
                {
                    b.Property<int>("idTypeAppeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("typeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTypeAppeal");

                    b.ToTable("TypeAppeals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("webApiipAweb.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectThingPack", b =>
                {
                    b.HasOne("webApiipAweb.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsidSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApiipAweb.Models.ThingPack", null)
                        .WithMany()
                        .HasForeignKey("ThingPacksidThingPack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThingExecutionThingPackExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.ThingExecution", null)
                        .WithMany()
                        .HasForeignKey("ThingExecutionsidThingExecution")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApiipAweb.Models.ThingPackExecution", null)
                        .WithMany()
                        .HasForeignKey("ThingPackExecutionsidThingPackExecution")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("webApiipAweb.Models.AchivmentExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", "Child")
                        .WithMany("AchivmentExecutions")
                        .HasForeignKey("ChildId");

                    b.HasOne("webApiipAweb.Models.Achivment", "Achivment")
                        .WithMany("AchivmentExecutions")
                        .HasForeignKey("idAchivment");

                    b.Navigation("Achivment");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("webApiipAweb.Models.AnswearOnTask", b =>
                {
                    b.HasOne("webApiipAweb.Models.TaskWithClosedAnsw", "TaskWithClosedAnsw")
                        .WithMany("AnswearOnTask")
                        .HasForeignKey("idTask");

                    b.HasOne("webApiipAweb.Models.TestTask", "TestTask")
                        .WithMany("AnswearOnTasks")
                        .HasForeignKey("idTestTask");

                    b.Navigation("TaskWithClosedAnsw");

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("webApiipAweb.Models.AnswearOnTaskOpen", b =>
                {
                    b.HasOne("webApiipAweb.Models.TaskWithOpenAnsw", "TaskWithOpenAnsw")
                        .WithMany("AnswearOnTaskOpens")
                        .HasForeignKey("idTask");

                    b.Navigation("TaskWithOpenAnsw");
                });

            modelBuilder.Entity("webApiipAweb.Models.Appeal", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", "Child")
                        .WithMany("Appeals")
                        .HasForeignKey("ChildId");

                    b.HasOne("webApiipAweb.Models.TypeAppeal", "TypeAppeal")
                        .WithMany("Appeals")
                        .HasForeignKey("idTypeAppeal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("TypeAppeal");
                });

            modelBuilder.Entity("webApiipAweb.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("webApiipAweb.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webApiipAweb.Models.Child", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("webApiipAweb.Models.Area", b =>
                {
                    b.HasOne("webApiipAweb.Models.Region", "Region")
                        .WithMany("Areas")
                        .HasForeignKey("idRegion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("webApiipAweb.Models.Chapter", b =>
                {
                    b.HasOne("webApiipAweb.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("idSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("webApiipAweb.Models.ChapterExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.Chapter", "Chapter")
                        .WithMany("ChapterExecutions")
                        .HasForeignKey("idChapter");

                    b.HasOne("webApiipAweb.Models.SubjectExecution", "SubjectExecution")
                        .WithMany("ChapterExecutions")
                        .HasForeignKey("idSubjectExecution");

                    b.Navigation("Chapter");

                    b.Navigation("SubjectExecution");
                });

            modelBuilder.Entity("webApiipAweb.Models.Child", b =>
                {
                    b.HasOne("webApiipAweb.Models.Municipality", "Municipality")
                        .WithMany("MunicipalityAdmins")
                        .HasForeignKey("idMunicipality");

                    b.HasOne("webApiipAweb.Models.School", "School")
                        .WithMany("Users")
                        .HasForeignKey("idSchool");

                    b.Navigation("Municipality");

                    b.Navigation("School");
                });

            modelBuilder.Entity("webApiipAweb.Models.LevelStudingExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", "Child")
                        .WithMany("LevelStudingExecutions")
                        .HasForeignKey("ChildId");

                    b.HasOne("webApiipAweb.Models.LevelStuding", "LevelStuding")
                        .WithMany()
                        .HasForeignKey("idLevelStuding")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("LevelStuding");
                });

            modelBuilder.Entity("webApiipAweb.Models.Municipality", b =>
                {
                    b.HasOne("webApiipAweb.Models.Area", "Area")
                        .WithMany("Municipalities")
                        .HasForeignKey("idArea");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("webApiipAweb.Models.School", b =>
                {
                    b.HasOne("webApiipAweb.Models.Municipality", "Municipality")
                        .WithMany("Schools")
                        .HasForeignKey("idMunicipality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("webApiipAweb.Models.SessionChapterExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.ChapterExecution", "ChapterExecution")
                        .WithMany("SessionChapterExecutions")
                        .HasForeignKey("idChapterExecution");

                    b.HasOne("webApiipAweb.Models.Child", "Child")
                        .WithMany("SessionChapterExecutions")
                        .HasForeignKey("idChild");

                    b.Navigation("ChapterExecution");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("webApiipAweb.Models.SessionProgress", b =>
                {
                    b.HasOne("webApiipAweb.Models.SessionChapterExecution", "SessionChapterExecution")
                        .WithMany("SessionProgresses")
                        .HasForeignKey("idSessionChapterExecution");

                    b.Navigation("SessionChapterExecution");
                });

            modelBuilder.Entity("webApiipAweb.Models.Solution", b =>
                {
                    b.HasOne("webApiipAweb.Models.TaskWithClosedAnsw", "TaskWithClosedAnsw")
                        .WithMany("Solutions")
                        .HasForeignKey("idTaskWithClosedAnsw");

                    b.HasOne("webApiipAweb.Models.TaskWithOpenAnsw", "TaskWithOpenAnsw")
                        .WithMany("Solutions")
                        .HasForeignKey("idTaskWithOpenAnsw");

                    b.Navigation("TaskWithClosedAnsw");

                    b.Navigation("TaskWithOpenAnsw");
                });

            modelBuilder.Entity("webApiipAweb.Models.Subject", b =>
                {
                    b.HasOne("webApiipAweb.Models.LevelStuding", "LevelStuding")
                        .WithMany("Subjects")
                        .HasForeignKey("idLevelStuding")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelStuding");
                });

            modelBuilder.Entity("webApiipAweb.Models.SubjectExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.LevelStudingExecution", "LevelStudingExecution")
                        .WithMany("SubjectExecutions")
                        .HasForeignKey("idLevelStudingExecution");

                    b.HasOne("webApiipAweb.Models.Subject", "Subject")
                        .WithMany("SubjectExecutions")
                        .HasForeignKey("idSubject");

                    b.Navigation("LevelStudingExecution");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithClosedAnsw", b =>
                {
                    b.HasOne("webApiipAweb.Models.TestPack", "TestPack")
                        .WithMany("TaskWithClosedAnsws")
                        .HasForeignKey("idTestPack");

                    b.Navigation("TestPack");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithClosedAnswsExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.AnswearOnTask", "AnswearOnTask")
                        .WithMany()
                        .HasForeignKey("idAnswearOnTask");

                    b.HasOne("webApiipAweb.Models.TaskWithClosedAnsw", "TaskWithClosedAnsw")
                        .WithMany()
                        .HasForeignKey("idTask");

                    b.HasOne("webApiipAweb.Models.TestPackExecution", "TestPackExecution")
                        .WithMany("TaskWithClosedAnswsExecutions")
                        .HasForeignKey("idTestPackExecution");

                    b.Navigation("AnswearOnTask");

                    b.Navigation("TaskWithClosedAnsw");

                    b.Navigation("TestPackExecution");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithOpenAnsw", b =>
                {
                    b.HasOne("webApiipAweb.Models.TestPack", "TestPack")
                        .WithMany("TaskWithOpenAnsws")
                        .HasForeignKey("idTestPack");

                    b.Navigation("TestPack");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithOpenAnswsExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.TaskWithOpenAnsw", "TaskWithOpenAnsw")
                        .WithMany()
                        .HasForeignKey("idTask");

                    b.HasOne("webApiipAweb.Models.TestPackExecution", "TestPackExecution")
                        .WithMany("TaskWithOpenAnswsExecutions")
                        .HasForeignKey("idTestPackExecution");

                    b.Navigation("TaskWithOpenAnsw");

                    b.Navigation("TestPackExecution");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestPack", b =>
                {
                    b.HasOne("webApiipAweb.Models.Chapter", "Chapter")
                        .WithMany("TestPacks")
                        .HasForeignKey("idChapter");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestPackExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.ChapterExecution", "ChapterExecution")
                        .WithMany("TestPackExecutions")
                        .HasForeignKey("idChapterExecution");

                    b.HasOne("webApiipAweb.Models.TestPack", "TestPack")
                        .WithMany("TestPackExecutions")
                        .HasForeignKey("idTestPack");

                    b.Navigation("ChapterExecution");

                    b.Navigation("TestPack");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestTask", b =>
                {
                    b.HasOne("webApiipAweb.Models.TestPack", "TestPack")
                        .WithMany("TestTasks")
                        .HasForeignKey("idTestPack");

                    b.Navigation("TestPack");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestTaskExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.AnswearOnTask", "AnswearOnTask")
                        .WithMany()
                        .HasForeignKey("idAnswearOnTask");

                    b.HasOne("webApiipAweb.Models.TestTask", "TestTask")
                        .WithMany()
                        .HasForeignKey("idTestTask");

                    b.HasOne("webApiipAweb.Models.TryingTestTask", "TryingTestTask")
                        .WithMany("TestTaskExecutions")
                        .HasForeignKey("idTryingTestTask");

                    b.Navigation("AnswearOnTask");

                    b.Navigation("TestTask");

                    b.Navigation("TryingTestTask");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheoreticalMaterial", b =>
                {
                    b.HasOne("webApiipAweb.Models.Chapter", "Chapter")
                        .WithMany("TheoreticalMaterials")
                        .HasForeignKey("idChapter");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheoreticalMaterialResource", b =>
                {
                    b.HasOne("webApiipAweb.Models.TheoreticalMaterial", "TheoreticalMaterial")
                        .WithMany("TheoreticalMaterialResources")
                        .HasForeignKey("idTheoreticalMaterial");

                    b.Navigation("TheoreticalMaterial");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheorySession", b =>
                {
                    b.HasOne("webApiipAweb.Models.ChapterExecution", "ChapterExecution")
                        .WithMany("TheorySessions")
                        .HasForeignKey("idChapterExecution");

                    b.HasOne("webApiipAweb.Models.Child", "Child")
                        .WithMany("TheorySessions")
                        .HasForeignKey("idChild");

                    b.Navigation("ChapterExecution");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("webApiipAweb.Models.Thing", b =>
                {
                    b.HasOne("webApiipAweb.Models.ThingPack", "ThingPack")
                        .WithMany("Things")
                        .HasForeignKey("idthingPack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThingPack");
                });

            modelBuilder.Entity("webApiipAweb.Models.ThingExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.Thing", "Thing")
                        .WithMany("ThingExecutions")
                        .HasForeignKey("idThing")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thing");
                });

            modelBuilder.Entity("webApiipAweb.Models.ThingPackExecution", b =>
                {
                    b.HasOne("webApiipAweb.Models.Child", "Child")
                        .WithMany("ThingPackExecutions")
                        .HasForeignKey("ChildId");

                    b.HasOne("webApiipAweb.Models.ThingPack", "ThingPack")
                        .WithMany("ThingPackExecutions")
                        .HasForeignKey("idThingPack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("ThingPack");
                });

            modelBuilder.Entity("webApiipAweb.Models.TryingTestTask", b =>
                {
                    b.HasOne("webApiipAweb.Models.TestPackExecution", "TestPackExecution")
                        .WithMany("TryingTestTasks")
                        .HasForeignKey("idTestPackExecution");

                    b.Navigation("TestPackExecution");
                });

            modelBuilder.Entity("webApiipAweb.Models.Achivment", b =>
                {
                    b.Navigation("AchivmentExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("webApiipAweb.Models.Area", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("webApiipAweb.Models.Chapter", b =>
                {
                    b.Navigation("ChapterExecutions");

                    b.Navigation("TestPacks");

                    b.Navigation("TheoreticalMaterials");
                });

            modelBuilder.Entity("webApiipAweb.Models.ChapterExecution", b =>
                {
                    b.Navigation("SessionChapterExecutions");

                    b.Navigation("TestPackExecutions");

                    b.Navigation("TheorySessions");
                });

            modelBuilder.Entity("webApiipAweb.Models.Child", b =>
                {
                    b.Navigation("AchivmentExecutions");

                    b.Navigation("Appeals");

                    b.Navigation("Claims");

                    b.Navigation("LevelStudingExecutions");

                    b.Navigation("Logins");

                    b.Navigation("SessionChapterExecutions");

                    b.Navigation("TheorySessions");

                    b.Navigation("ThingPackExecutions");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("webApiipAweb.Models.LevelStuding", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("webApiipAweb.Models.LevelStudingExecution", b =>
                {
                    b.Navigation("SubjectExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.Municipality", b =>
                {
                    b.Navigation("MunicipalityAdmins");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("webApiipAweb.Models.Region", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("webApiipAweb.Models.School", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("webApiipAweb.Models.SessionChapterExecution", b =>
                {
                    b.Navigation("SessionProgresses");
                });

            modelBuilder.Entity("webApiipAweb.Models.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("SubjectExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.SubjectExecution", b =>
                {
                    b.Navigation("ChapterExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithClosedAnsw", b =>
                {
                    b.Navigation("AnswearOnTask");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TaskWithOpenAnsw", b =>
                {
                    b.Navigation("AnswearOnTaskOpens");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestPack", b =>
                {
                    b.Navigation("TaskWithClosedAnsws");

                    b.Navigation("TaskWithOpenAnsws");

                    b.Navigation("TestPackExecutions");

                    b.Navigation("TestTasks");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestPackExecution", b =>
                {
                    b.Navigation("TaskWithClosedAnswsExecutions");

                    b.Navigation("TaskWithOpenAnswsExecutions");

                    b.Navigation("TryingTestTasks");
                });

            modelBuilder.Entity("webApiipAweb.Models.TestTask", b =>
                {
                    b.Navigation("AnswearOnTasks");
                });

            modelBuilder.Entity("webApiipAweb.Models.TheoreticalMaterial", b =>
                {
                    b.Navigation("TheoreticalMaterialResources");
                });

            modelBuilder.Entity("webApiipAweb.Models.Thing", b =>
                {
                    b.Navigation("ThingExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.ThingPack", b =>
                {
                    b.Navigation("ThingPackExecutions");

                    b.Navigation("Things");
                });

            modelBuilder.Entity("webApiipAweb.Models.TryingTestTask", b =>
                {
                    b.Navigation("TestTaskExecutions");
                });

            modelBuilder.Entity("webApiipAweb.Models.TypeAppeal", b =>
                {
                    b.Navigation("Appeals");
                });
#pragma warning restore 612, 618
        }
    }
}
